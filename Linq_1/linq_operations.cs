using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Linq_1
{
    internal class Linq_operations
    {
        public static void PerformQueries()
        {
            List<Order> orders = OrderService.GetOrders();



            //Get all orders placed after January 1, 2023.
            //method syntax
            Console.WriteLine("All orders placed after January 1, 2023 in Method syntax");
            var MethodRecentOrders = orders.Where(o => o.OrderDate > new DateTime(2023,1,1));
            foreach (var order in MethodRecentOrders)
            {
                Console.WriteLine(order);
            }
            Console.WriteLine();
            Console.WriteLine("All orders placed after January 1, 2023 in query syntax");

            //query syntax
            var QueryRecentOrders = from order in orders
                                    where order.OrderDate > new DateTime(2023, 1, 1)
                                    select order;
            foreach (var order in QueryRecentOrders)
            {
                Console.WriteLine(order);
            }

            //Retrieve only the CustomerName and OrderAmount using an anonymous type.
            //method syntax
            Console.WriteLine();
            Console.WriteLine("Customer Names and Order Amounts using method syntax:");
            var MethodcustomerOrders = orders.Select(o => new { o.CustomerName, o.OrderAmount });
            foreach (var order in MethodcustomerOrders)
            {
                Console.WriteLine($"Customer: {order.CustomerName}, Amount: ${order.OrderAmount:F2}");
            }

            //query syntax
            Console.WriteLine();
            Console.WriteLine("Customer Names and Order Amounts using query syntax:");
            var QueryCustomerOrders = from order in orders
                                      select new {order.CustomerName, order.OrderAmount};
            foreach (var order in QueryCustomerOrders)
            {
                Console.WriteLine($"Customer: {order.CustomerName}, Amount: ${order.OrderAmount:F2}");
            }

            //Find the total revenue generated by all orders.
            //method syntax
            Console.WriteLine();
            Console.WriteLine("Total Revenue Generated using Method syntax:");
            var MethodTotalRevenue = orders.Sum(x => x.OrderAmount);
            Console.WriteLine($"{MethodTotalRevenue:F2}");

            //query syntax
            Console.WriteLine();
            Console.WriteLine("Total Revenue Generated using Query syntax:");
            var QueryTotalRevenue = (from order in orders
                                     select order.OrderAmount).Sum();
            Console.WriteLine($"{QueryTotalRevenue:F2}");

            //Find the order with the highest and lowest amount.
            //method syntax
            Console.WriteLine();
            var methodHighestOrder = orders.Max(x => x.OrderAmount); // using max will only return max value but maxby gives whole object. 
            var methodLowestOrder = orders.MinBy(x => x.OrderAmount); // ignores null values
            Console.WriteLine($"Highest Order (Method Syntax): {methodHighestOrder}");
            Console.WriteLine($"Lowest Order (Method Syntax): {methodLowestOrder}");

            //query syntax
            var queryhighestOrder = (from o in orders
                                orderby o.OrderAmount descending
                                select o).First();

            var querylowestOrder = (from o in orders
                                    where o.OrderAmount > 0 // if not added this statement will get output as null because you have n
                               orderby o.OrderAmount
                               select o).First();

            Console.WriteLine($"Highest Order (Query Syntax): {queryhighestOrder}");
            Console.WriteLine($"Lowest Order (Query Syntax): {querylowestOrder}");
            Console.WriteLine();

            //Retrieve orders grouped by month.
            //method syntax
            var methodgroupedOrders = orders.GroupBy(o => new {o.OrderDate.Month });

            Console.WriteLine("Orders Grouped by Month (Method Syntax):");
            foreach (var group in methodgroupedOrders)
            {
                Console.WriteLine($"Month: {group.Key.Month}");
                foreach (var order in group)
                {
                    Console.WriteLine($"  Order ID: {order.OrderId}, Customer: {order.CustomerName}, Amount: ${order.OrderAmount:F2}, Date: {order.OrderDate}");
                }
            }

            //query syntax
            var querygroupedOrders = from o in orders
                                     group o by new { o.OrderDate.Month } into g
                                     select g;
            Console.WriteLine();
            Console.WriteLine("Orders Grouped by Month (Query Syntax):");
            foreach (var group in querygroupedOrders)
            {
                Console.WriteLine($"Month: {group.Key.Month}");
                foreach (var order in group)
                {
                    Console.WriteLine($"  Order ID: {order.OrderId}, Customer: {order.CustomerName}, Amount: ${order.OrderAmount:F2}, Date: {order.OrderDate}");
                }
            }

            //Use SelectMany to get a list of all products ordered (no duplicates).
            //method syntax
            Console.WriteLine();
            Console.WriteLine("Distinct order using SelectMany (Method Syntax): ");
            var methoduniqueProducts = orders.SelectMany(o => o.Products).Distinct();
            foreach(var product in methoduniqueProducts)
            {
                Console.WriteLine(product);
            }

            //query syntax
            Console.WriteLine();
            Console.WriteLine("Distinct order using SelectMany (query Syntax): ");
            var queryuniqueProducts = (from o in orders
                                      from p in o.Products
                                      select p).Distinct();
            foreach (var product in queryuniqueProducts)
            {
                Console.WriteLine(product);
            }

            //Get the average order amount.
            //method syntax
            Console.WriteLine();
            double methodaverageOrderAmount = orders.Where(o => o.OrderAmount.HasValue).Average(o => o.OrderAmount.Value); //Average(o => o.OrderAmount.Value) 
            Console.WriteLine($"Average Order Amount(Method Syntax): ${methodaverageOrderAmount:F2}");

            //query syntax
            Console.WriteLine();
            var queryaverageOrderAmount = (from o in orders
                                      select o.OrderAmount).Average();var queryAverageOrderAmount = (from o in orders
                               where o.OrderAmount.HasValue  // Remove nulls
                               select o.OrderAmount.Value)   // Extract value
                               .DefaultIfEmpty(0)            // Prevent empty list error
                               .Average();

            //var queryAverageOrderAmount = (from o in orders
            //                               where o.OrderAmount.HasValue  // Remove nulls
            //                               select o.OrderAmount.Value)   // Extract value
            //                   .DefaultIfEmpty(0)            // Prevent empty list error
            //                   .Average();


            Console.WriteLine($"Average Order Amount (Query Syntax): ${queryaverageOrderAmount:F2}");

            //Retrieve the names of customers who have placed orders above $500.
            //method syntax
            Console.WriteLine();
            var methodcustomers = orders
                        .Where(o => o.OrderAmount > 500)
                        .Select(o => o.CustomerName);

            Console.WriteLine("Customers with orders above $500 (Method Syntax): ");
            foreach (var customer in methodcustomers)
            {
                Console.WriteLine($"- {customer}");
            }

            //query syntax
            Console.WriteLine();
            var querycustomers = (from o in orders
                                 where o.OrderAmount > 500
                                 select o.CustomerName);

            Console.WriteLine("Customers with orders above $500 (Query Syntax):");
            foreach (var customer in querycustomers)
            {
                Console.WriteLine($"- {customer}");
            }

            //Find how many orders were placed in each month.
            //method syntax
            Console.WriteLine();
            var methodordersByMonth = orders.GroupBy(o => o.OrderDate.Month).Select(g => new { Month = g.Key, Count = g.Count() });

            Console.WriteLine("Orders Count by Month (Method Syntax):");
            foreach (var entry in methodordersByMonth)
            {
                Console.WriteLine($"Month: {entry.Month}, Orders: {entry.Count}");
            }

            //query syntax
            Console.WriteLine();
            var queryordersByMonth = from o in orders
                                group o by o.OrderDate.Month into monthGroup
                                select new { Month = monthGroup.Key, Count = monthGroup.Count() };

            Console.WriteLine("Orders Count by Month (Query Syntax):");
            foreach (var entry in queryordersByMonth)
            {
                Console.WriteLine($"Month: {entry.Month}, Orders: {entry.Count}");
            }

            // Get orders where OrderAmount is null
            //method syntax
            Console.WriteLine();
            var methodmissingAmountOrders = orders.Where(o => o.OrderAmount == null).ToList();

            Console.WriteLine("Orders with Missing Amount (Method Syntax:");
            foreach (var order in methodmissingAmountOrders)
            {
                Console.WriteLine(order);
            }

            //query syntax
            Console.WriteLine();
            var querymissingAmountOrders = from o in orders
                                           where o.OrderAmount == null
                                           select o;

            Console.WriteLine("Orders with Missing Amount (Query Syntax):");
            foreach (var order in querymissingAmountOrders)
            {
                Console.WriteLine(order);
            }

        }
    }
}
